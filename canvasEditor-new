import React, { useState } from "react";

const CanvasDesigner = () => {
    const [elements, setElements] = useState([]);
    const [draggingId, setDraggingId] = useState(null);
    const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
    const [selectedElementId, setSelectedElementId] = useState(null);
    const [showToolbar, setShowToolbar] = useState(false);
    const [toolbarPosition, setToolbarPosition] = useState({ x: 0, y: 0 });
    const [selectedCell, setSelectedCell] = useState(null);

    const handleDrop = (e) => {
        e.preventDefault();
        const type = e.dataTransfer.getData("type");
        const canvasRect = e.currentTarget.getBoundingClientRect();
        const x = e.clientX - canvasRect.left - dragOffset.x;
        const y = e.clientY - canvasRect.top - dragOffset.y;

        if (type) {
            const newElement = {
                id: Date.now(),
                type,
                x,
                y,
                width: type === "table" ? 200 : type === "checkbox" ? 20 : 100,
                height: type === "table" ? 100 : type === "checkbox" ? 20 : 50,
                content: type === "text" ? "Edit me" : "",
                rows: 2,
                cols: 2,
                tableData: Array(2)
                    .fill(null)
                    .map(() => Array(2).fill("Cell")),
                label: "Label",
            };
            setElements([...elements, newElement]);
        } else if (draggingId) {
            setElements((prev) =>
                prev.map((el) =>
                    el.id === draggingId ? { ...el, x, y } : el
                )
            );
            setDraggingId(null);
        }
    };

    const handleDragOver = (e) => e.preventDefault();

    const handleDragStart = (e, id) => {
        const element = elements.find((el) => el.id === id);
        const canvasRect = e.currentTarget.parentNode.getBoundingClientRect();
        const offsetX = e.clientX - canvasRect.left - element.x;
        const offsetY = e.clientY - canvasRect.top - element.y;
        setDraggingId(id);
        setDragOffset({ x: offsetX, y: offsetY });
    };

    const handleSelectElement = (e, id) => {
        const canvasRect = e.currentTarget.getBoundingClientRect();
        setSelectedElementId(id);
        setSelectedCell(null);
        setShowToolbar(true);
        setToolbarPosition({ x: e.clientX - canvasRect.left, y: e.clientY - canvasRect.top });
    };

    const handleSelectCell = (e, elementId, rowIdx, colIdx) => {
        e.stopPropagation(); // Prevent canvas click events from resetting selection
        setSelectedElementId(elementId); // Set the selected element ID
        setSelectedCell({ rowIdx, colIdx }); // Set the selected cell
        setShowToolbar(true); // Show the toolbar
        const canvasRect = e.currentTarget.getBoundingClientRect();
        setToolbarPosition({
            x: e.clientX - canvasRect.left,
            y: e.clientY - canvasRect.top,
        });
    };


    const handleUpdateConfig = (field, value) => {
        setElements((prev) =>
            prev.map((el) =>
                el.id === selectedElementId ? { ...el, [field]: value } : el
            )
        );
    };

    const handleTextFormat = (command) => {
        document.execCommand(command, false, null);
    };

    const insertDropdown = () => {
        if (!selectedCell || !selectedElementId) {
            alert("Please select a cell to insert a dropdown.");
            return;
        }

        const dropdownHTML = `
            <select>
                <option value="Option 1">Option 1</option>
                <option value="Option 2">Option 2</option>
            </select>`;
        const { rowIdx, colIdx } = selectedCell;

        setElements((prev) =>
            prev.map((el) => {
                if (el.id === selectedElementId && el.type === "table") {
                    const updatedTableData = el.tableData.map((row, rIdx) =>
                        rIdx === rowIdx
                            ? row.map((cell, cIdx) => (cIdx === colIdx ? dropdownHTML : cell))
                            : row
                    );
                    return { ...el, tableData: updatedTableData };
                }
                return el;
            })
        );
    };

    const updateCellContent = (elementId, rowIdx, colIdx, content) => {
        setElements((prev) =>
            prev.map((el) => {
                if (el.id === elementId && el.type === "table") {
                    const updatedTableData = el.tableData.map((row, rIdx) =>
                        rIdx === rowIdx
                            ? row.map((cell, cIdx) =>
                                cIdx === colIdx ? content : cell
                            )
                            : row
                    );
                    return { ...el, tableData: updatedTableData };
                }
                return el;
            })
        );
    };

    const handleAddRow = () => {
        if (selectedElementId) {
            setElements((prev) =>
                prev.map((el) => {
                    if (el.id === selectedElementId && el.type === "table") {
                        const newTableData = [...el.tableData, Array(el.cols).fill("Cell")];
                        return { ...el, tableData: newTableData, rows: el.rows + 1 };
                    }
                    return el;
                })
            );
        }
    };

    const handleRemoveRow = () => {
        if (selectedElementId) {
            setElements((prev) =>
                prev.map((el) => {
                    if (el.id === selectedElementId && el.type === "table" && el.rows > 1) {
                        const newTableData = el.tableData.slice(0, -1);
                        return { ...el, tableData: newTableData, rows: el.rows - 1 };
                    }
                    return el;
                })
            );
        }
    };

    const handleAddColumn = () => {
        if (selectedElementId) {
            setElements((prev) =>
                prev.map((el) => {
                    if (el.id === selectedElementId && el.type === "table") {
                        const newTableData = el.tableData.map((row) => [...row, "Cell"]);
                        return { ...el, tableData: newTableData, cols: el.cols + 1 };
                    }
                    return el;
                })
            );
        }
    };

    const handleRemoveColumn = () => {
        if (selectedElementId) {
            setElements((prev) =>
                prev.map((el) => {
                    if (el.id === selectedElementId && el.type === "table" && el.cols > 1) {
                        const newTableData = el.tableData.map((row) => row.slice(0, -1));
                        return { ...el, tableData: newTableData, cols: el.cols - 1 };
                    }
                    return el;
                })
            );
        }
    };

    const handleRemoveElement = () => {
        if (selectedElementId) {
            setElements((prev) => prev.filter((el) => el.id !== selectedElementId));
            setShowToolbar(false);
            setSelectedElementId(null);
        }
    };


    const generateHTML = () => {
        const html = elements
            .map((el) => {

                if (el.type === "text") {
                    return `<div style="position: absolute; left: ${el.x}px; top: ${el.y}px; width: ${el.width}px; height: ${el.height}px; background-color: ${el.backgroundColor};">${el.content}</div>`;
                } else if (el.type === "table") {
                    const rows = el.tableData
                        .map(
                            (row) =>
                                `<tr>${row
                                    .map(
                                        (cell) =>
                                            `<td style="border: 1px solid #333; padding: 5px;">${cell}</td>`
                                    )
                                    .join("")}</tr>`
                        )
                        .join("");
                    return `<div style="position: absolute; left: ${el.x}px; top: ${el.y}px; width: ${el.width}px; height: ${el.height}px;">
                                <table style="width: 100%; height: 100%; border-collapse: collapse;">
                                    ${rows}
                                </table>
                            </div>`;
                } else if (el.type === "checkbox") {
                    return `<div style="position: absolute; left: ${el.x}px; top: ${el.y}px; width: ${el.width}px; height: ${el.height}px;">
                                <input type="checkbox" ${el.checked ? "checked" : ""} />
                            </div>`;
                }
                return "";
            })
            .join("");
        console.log(html);
        return html;
    };

    const selectedElement = elements.find((el) => el.id === selectedElementId);

    return (
        <div style={{ display: "flex", gap: "20px" }}>
            {/* Configuration Panel */}
            <div style={{ width: "200px", border: "1px solid #ccc", padding: "10px" }}>
                <h4>Configuration</h4>
                {selectedElement ? (
                    <>
                        <label>
                            Width (px):
                            <input
                                type="number"
                                value={selectedElement.width}
                                onChange={(e) => handleUpdateConfig("width", parseInt(e.target.value) || 0)}
                            />
                        </label>

                        <label>
                            Height (px):
                            <input
                                type="number"
                                value={selectedElement.height}
                                onChange={(e) => handleUpdateConfig("height", parseInt(e.target.value) || 0)}
                            />
                        </label>
                        <label>
                            Background color:
                            <input
                                type="color"
                                value={selectedElement?.backgroundColor || "#ffffff"}
                                onChange={(e) => {
                                    const newColor = e.target.value;
                                    setElements((prev) =>
                                        prev.map((el) =>
                                            el.id === selectedElement.id
                                                ? { ...el, backgroundColor: newColor }
                                                : el
                                        )
                                    );
                                }}
                            />
                        </label>
                    </>
                ) : (
                    <p>Select an item to configure</p>
                )}
                <button onClick={generateHTML}>Generate HTML</button>
            </div>

            {/* Canvas and Toolbar */}
            <div>
                <div
                    style={{
                        display: "flex",
                        gap: "10px",
                        marginBottom: "10px",
                        border: "1px solid #ccc",
                        padding: "10px",
                        backgroundColor: "#f1f1f1",
                    }}
                >
                    <button draggable onDragStart={(e) => e.dataTransfer.setData("type", "text")}>
                        Add Text
                    </button>
                    <button draggable onDragStart={(e) => e.dataTransfer.setData("type", "checkbox")}>
                        Add Checkbox
                    </button>
                    <button draggable onDragStart={(e) => e.dataTransfer.setData("type", "table")}>
                        Add Table
                    </button>
                </div>

                <div
                    style={{
                        position: "relative",
                        width: "800px",
                        height: "600px",
                        border: "1px solid #ccc",
                        backgroundColor: "#f9f9f9",
                    }}
                    onDrop={handleDrop}
                    onDragOver={handleDragOver}
                >
                    {elements.map((el) => (
                        <div
                            key={el.id}
                            style={{
                                position: "absolute",
                                left: el.x,
                                top: el.y,
                                width: el.width,
                                height: el.height,
                                border: el.type === "text" ? "1px dashed #333" : "none",
                                backgroundColor: el.backgroundColor,
                                cursor: "move",
                            }}
                            draggable
                            onDragStart={(e) => handleDragStart(e, el.id)}
                            onClick={(e) => handleSelectElement(e, el.id)}
                        >
                            {el.type === "text" ? (
                                <div
                                    contentEditable
                                    suppressContentEditableWarning
                                    style={{
                                        width: "100%",
                                        height: "100%",
                                        border: "none",
                                        outline: "none",
                                    }}
                                >
                                    {el.content}
                                </div>
                            ) : el.type === "table" ? (
                                <table
                                    style={{
                                        width: "100%",
                                        height: "100%",
                                        borderCollapse: "collapse",
                                    }}
                                >
                                    {el.tableData.map((row, rowIdx) => (
                                        <tr key={rowIdx}>
                                            {row.map((cell, colIdx) => (
                                                <td
                                                    key={colIdx}
                                                    style={{
                                                        border: "1px solid #ccc",
                                                        padding: "5px",
                                                        position: "relative",
                                                    }}
                                                    onClick={(e) => handleSelectCell(e, el.id, rowIdx, colIdx)}
                                                >
                                                    {cell.includes("<select") ? (
                                                        // Render the dropdown using `dangerouslySetInnerHTML`
                                                        <div contentEditable>
                                                            <div

                                                                dangerouslySetInnerHTML={{ __html: cell }}
                                                                style={{ pointerEvents: "auto" }}
                                                            />
                                                        </div>
                                                    ) : (
                                                        // Render editable content if it's not a dropdown
                                                        <div
                                                            contentEditable
                                                            suppressContentEditableWarning
                                                            onBlur={(e) =>
                                                                updateCellContent(el.id, rowIdx, colIdx, e.target.textContent)
                                                            }
                                                            style={{
                                                                outline: "none",
                                                                minHeight: "20px",
                                                                width: "100%",
                                                                height: "100%",
                                                            }}
                                                        >
                                                            {cell}
                                                        </div>
                                                    )}
                                                </td>
                                            ))}
                                        </tr>
                                    ))}


                                </table>
                            ) : el.type === "checkbox" ? (
                                <input type="checkbox" checked={el.checked} readOnly />
                            ) : null}
                        </div>
                    ))}

                    {/* Toolbar */}
                    {/* {showToolbar && (
                        <div
                            style={{
                                position: "absolute",
                                left: toolbarPosition.x,
                                top: toolbarPosition.y,
                                backgroundColor: "#fff",
                                border: "1px solid #ccc",
                                padding: "5px",
                                display: "flex",
                                gap: "5px",
                                zIndex: 1000,
                            }}
                        >
                            <button onClick={() => handleTextFormat("bold")}>B</button>
                            <button onClick={() => handleTextFormat("italic")}>I</button>
                            <button onClick={() => handleTextFormat("justifyLeft")}>Left</button>
                            <button onClick={() => handleTextFormat("justifyCenter")}>Center</button>
                            <button onClick={() => handleTextFormat("justifyRight")}>Right</button>
                            <button onClick={() => handleTextFormat("insertUnorderedList")}>•</button>
                            <button onClick={insertDropdown}>Dropdown</button>
                            <button onClick={() => setShowToolbar(false)}>Close</button>
                        </div>
                    )} */}

                    {showToolbar && (
                        <div
                            style={{
                                position: "absolute",
                                top: toolbarPosition.y,
                                left: toolbarPosition.x,
                                padding: "10px",
                                backgroundColor: "#fff",
                                border: "1px solid #ccc",
                                boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
                                zIndex: 10,
                            }}
                        >
                            <button onClick={() => handleTextFormat("bold")}>B</button>
                            <button onClick={() => handleTextFormat("italic")}>I</button>
                            <button onClick={() => handleTextFormat("justifyLeft")}>Left</button>
                            <button onClick={() => handleTextFormat("justifyCenter")}>Center</button>
                            <button onClick={() => handleTextFormat("justifyRight")}>Right</button>
                            <button onClick={() => handleTextFormat("insertUnorderedList")}>•</button>
                            {selectedElementId && selectedElement.type === "table" && (
                                <>
                                    <button onClick={handleAddRow}>Add Row</button>
                                    <button onClick={handleRemoveRow}>Remove Row</button>
                                    <button onClick={handleAddColumn}>Add Column</button>
                                    <button onClick={handleRemoveColumn}>Remove Column</button>
                                    <button onClick={insertDropdown}>Insert Dropdown</button>
                                </>
                            )}
                            <button onClick={handleRemoveElement}>Remove Element</button>
                            <button onClick={() => setShowToolbar(false)}>Close</button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default CanvasDesigner;
