import React, { useState, useEffect, useCallback, useRef } from 'react';
import * as pdfjsLib from 'pdfjs-dist/build/pdf';
import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import update from 'immutability-helper';
import { PDFDocument, degrees } from 'pdf-lib';
import { IconMaterial } from '@abyss/web/ui/IconMaterial';
import { Tooltip } from '@abyss/web/ui/Tooltip';
import { setPageOrder, setRotationPerPage } from '@src/Store';
import { useDispatch, useSelector } from 'react-redux';

pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;

const ItemTypes = {
  PAGE: 'page',
};

const DraggablePage = ({
  isDraggable,
  pageNumber,
  index,
  movePage,
  pdfDoc,
  rotatePage,
  scale,
  rotation,
  pageRef,
}) => {
  const canvasRef = useRef(null);
  const renderTaskRef = useRef(null);
  
  const [{ isDragging }, drag] = useDrag({
    type: ItemTypes.PAGE,
    item: { index },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  const [, drop] = useDrop({
    accept: ItemTypes.PAGE,
    hover: (draggedItem) => {
      if (draggedItem.index !== index && isDraggable) {
        movePage(draggedItem.index, index);
        draggedItem.index = index;
      }
    },
  });

  const renderPage = useCallback(async () => {
    if (!pdfDoc || !pageNumber || !canvasRef.current) return;

    const canvas = canvasRef.current;
    const context = canvas.getContext('2d');

    try {
      const page = await pdfDoc.getPage(pageNumber);
      const combinedRotation = (rotation + page.rotate) % 360; // Combine default rotation with custom rotation
      const viewport = page.getViewport({ scale, rotation: combinedRotation });

      const pixelRatio = window.devicePixelRatio || 1;
      canvas.width = viewport.width * pixelRatio;
      canvas.height = viewport.height * pixelRatio;

      context.scale(pixelRatio, pixelRatio); // Scale context to handle high-DPI displays

      if (renderTaskRef.current) {
        renderTaskRef.current.cancel();
      }

      renderTaskRef.current = page.render({
        canvasContext: context,
        viewport,
      });

      await renderTaskRef.current.promise;
    } catch (error) {
      if (error.name !== 'RenderingCancelledException') {
        console.error(`Error rendering page ${index + 1}:`, error);
      }
    }
  }, [pdfDoc, pageNumber, scale, rotation]);

  useEffect(() => {
    renderPage();
    return () => {
      if (renderTaskRef.current) {
        renderTaskRef.current.cancel();
      }
    };
  }, [renderPage]);

  const handleRotateClockwise = () => rotatePage(index, (rotation + 90) % 360);
  const handleRotateAnticlockwise = () => rotatePage(index, (rotation - 90 + 360) % 360);

  return (
    <>
      <div
        ref={(node) => {
          drag(drop(node));
          pageRef(node);
        }}
        className={`page-container ${isDragging ? 'dragging' : ''} ${isDraggable ? 'cursor-move' : ''}`}
      >
        <canvas ref={canvasRef} />
      </div>
      <div className="flex fd-rev gap-5 p-r bottom-17 jc-center">
        <Tooltip content="Rotate Clockwise">
          <span>
            <IconMaterial icon="rotate_right" onClick={handleRotateClockwise} />
          </span>
        </Tooltip>
        <span className="page-number">{pageNumber}</span>
        <Tooltip content="Rotate Anti Clockwise">
          <span>
            <IconMaterial icon="rotate_left" onClick={handleRotateAnticlockwise} />
          </span>
        </Tooltip>
      </div>
    </>
  );
};

const PDFViewerNew = ({ pdfFile }) => {
  const claimPreviewData = useSelector((state) => state?.claimsPreview);
  const pageOrder = claimPreviewData?.pageOrder?.pageOrder || [];
  const rotationPerPage = claimPreviewData?.rotationPerPage?.rotationPerPage || {};
  
  const [error, setError] = useState(null);
  const [pdfUrl, setPdfUrl] = useState(pdfFile);
  const [pdfDoc, setPdfDoc] = useState(null);
  const [totalPages, setTotalPages] = useState(0);
  const [scale, setScale] = useState(1);
  const [currentPage, setCurrentPage] = useState(1);
  const dispatch = useDispatch();

  // Load PDF Document
  const loadPdfDocument = useCallback(async (url) => {
    try {
      const pdf = await pdfjsLib.getDocument(url).promise;
      setPdfDoc(pdf);
      setTotalPages(pdf.numPages);
      dispatch(setPageOrder({ pageOrder: [...Array(pdf.numPages).keys()].map(i => i + 1) }));
      setCurrentPage(1);
    } catch (error) {
      console.error('Error loading PDF:', error);
      setError(`Error loading PDF: ${error.message}`);
    }
  }, [dispatch]);

  useEffect(() => {
    // Resetting states on mount
    setPdfDoc(null);
    setTotalPages(0);
    setCurrentPage(1);
    
    // Load PDF whenever pdfUrl changes
    if (pdfUrl) {
      loadPdfDocument(pdfUrl);
    }
  }, [pdfUrl, loadPdfDocument]);

  const movePage = (fromIndex, toIndex) => {
    const updatedOrder = update(pageOrder, {
      $splice: [[fromIndex, 1], [toIndex, 0, pageOrder[fromIndex]]],
    });
    dispatch(setPageOrder({ pageOrder: updatedOrder }));
  };

  const rotatePage = (index, newRotation) => {
    dispatch(setRotationPerPage({
      rotationPerPage: {
        ...rotationPerPage,
        [index]: newRotation,
      },
    }));
  };

  const handleZoomIn = () => setScale(prevScale => Math.min(prevScale + 0.1, 4));
  const handleZoomOut = () => setScale(prevScale => Math.max(prevScale - 0.1, 0.5));

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="pdf-viewer">
        {error && <div className="error">{error}</div>}
        <div className="toolbar">
          <button onClick={handleZoomIn}>Zoom In</button>
          <button onClick={handleZoomOut}>Zoom Out</button>
          {/* Additional buttons for downloading/printing can be added here */}
        </div>
        <div className="pdf-pages">
          {pageOrder.map((pageNumber, index) => {
            const rotation = rotationPerPage[pageNumber - 1] || 0;
            return (
              <DraggablePage
                key={pageNumber}
                isDraggable={true}
                pageNumber={pageNumber}
                index={index}
                movePage={movePage}
                pdfDoc={pdfDoc}
                rotatePage={rotatePage}
                scale={scale}
                rotation={rotation}
                pageRef={(node) => (pageRefs.current[index] = node)}
              />
            );
          })}
        </div>
      </div>
    </DndProvider>
  );
};

export default PDFViewerNew;
