.carousel {
  display: flex;
  align-items: center;
  width: 100%;
  margin: auto;
  background-color: #f8f8f8;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.carousel-btn {
  background-color: transparent;
  border: none;
  font-size: 24px;
  color: #888;
  cursor: pointer;
  padding: 0 10px;
  z-index: 1;
}

.carousel-btn:hover {
  color: #000;
}

.carousel-container {
  display: flex;
  transition: transform 0.5s ease-in-out;
  width: 100%;
}

.carousel-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-width: 33.33%; /* Adjust to show 3 items */
  padding: 10px;
  background-color: #ffffff;
  border-radius: 10px;
  margin: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  text-align: center;
}

.label {
  font-size: 14px;
  color: #555;
  margin-bottom: 10px;
}

.number {
  font-size: 24px;
  font-weight: bold;
  color: #000;
}




import "./styles.css";
import { useState } from "react";

export default function App() {
  const [currentIndex, setCurrentIndex] = useState(0);

  const items = [
    { label: "Waiting of sign off", number: 1 },
    { label: "No of cases routed to License MD", number: 2 },
    { label: "No of cases routed to License MD", number: 3 },
    { label: "No of cases routed to License MD", number: 4 },
    { label: "No of cases routed to License MD", number: 5 },
    { label: "No of cases routed to License MD", number: 6 },
    { label: "No of cases routed to License MD", number: 7 },
    { label: "No of cases routed to License MD", number: 8 },
    { label: "No of cases routed to License MD", number: 9 },
  ];

  const totalItems = items.length;
  const visibleItems = 3; // Number of items visible at one time

  const moveSlide = (direction) => {
    let newIndex = currentIndex + direction;
    if (newIndex < 0) {
      newIndex = totalItems - visibleItems;
    } else if (newIndex >= totalItems - visibleItems + 1) {
      newIndex = 0;
    }
    setCurrentIndex(newIndex);
  };

  const offset = -currentIndex * (100 / visibleItems);

  return (
    <div className="carousel">
      <button className="carousel-btn prev" onClick={() => moveSlide(-1)}>
        &#10094;
      </button>
      <div
        className="carousel-container"
        style={{ transform: `translateX(${offset}%)` }}
      >
        {items.map((item, index) => (
          <div className="carousel-item" key={index}>
            <span className="label">{item.label}</span>
            <span className="number">{item.number}</span>
          </div>
        ))}
      </div>
      <button className="carousel-btn next" onClick={() => moveSlide(1)}>
        &#10095;
      </button>
    </div>
  );
}
