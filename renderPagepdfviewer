const handleDownload = async () => {
    if (!pdfDoc) return;

    try {
        const pdfBytes = await fetch(pdfUrl).then((res) => res.arrayBuffer());
        const originalPdfDoc = await PDFDocument.load(pdfBytes);
        const newPdfDoc = await PDFDocument.create();

        for (const pageNumber of pageOrder) {
            const [copiedPage] = await newPdfDoc.copyPages(originalPdfDoc, [pageNumber - 1]);
            const pageRotation = (rotationPerPage[pageNumber - 1] || 0) + copiedPage.getRotation().angle;
            copiedPage.setRotation(degrees(pageRotation));
            newPdfDoc.addPage(copiedPage);
        }

        const newPdfBytes = await newPdfDoc.save();
        const blob = new Blob([newPdfBytes], { type: "application/pdf" });
        
        // Revoke the old URL to avoid memory leaks
        if (pdfUrl) {
            URL.revokeObjectURL(pdfUrl);
        }

        const newUrl = URL.createObjectURL(blob);
        setPdfUrl(newUrl); // Update the PDF URL with the newly generated Blob
        
        const link = document.createElement("a");
        link.href = newUrl;
        link.download = "updated.pdf";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(newUrl);
    } catch (error) {
        console.error("Error downloading PDF:", error);
        alert(`Error downloading PDF: ${error.message}`);
    }
};


useEffect(() => {
    if (pdfUrl) {
        loadPdfDocument(pdfUrl); // Re-fetch and load the updated PDF
    }
}, [pdfUrl]); // Re-run this effect when pdfUrl changes


const renderPage = useCallback(async () => {
    if (!pdfDoc || !pageNumber || !canvasRef.current) return;

    const canvas = canvasRef.current;
    const context = canvas.getContext("2d");

    try {
        const page = await pdfDoc.getPage(pageNumber);

        // Get the default rotation from the PDF metadata and combine with current rotation
        const pageRotation = page.rotate; // Default rotation from PDF metadata
        const combinedRotation = (rotation + pageRotation) % 360; // Custom rotation

        // Get the viewport with applied scale and rotation
        const viewport = page.getViewport({ scale, rotation: combinedRotation });

        // Adjust the canvas size based on the viewport
        canvas.width = viewport.width * window.devicePixelRatio;
        canvas.height = viewport.height * window.devicePixelRatio;
        canvas.style.width = `${viewport.width}px`;
        canvas.style.height = `${viewport.height}px`;

        // Scale context for high-res rendering
        context.setTransform(window.devicePixelRatio, 0, 0, window.devicePixelRatio, 0, 0);

        // Cancel any previous rendering task before rendering a new one
        if (renderTaskRef.current) {
            renderTaskRef.current.cancel();
        }

        // Render the page on the canvas
        renderTaskRef.current = page.render({
            canvasContext: context,
            viewport,
        });

        await renderTaskRef.current.promise;
    } catch (error) {
        if (error.name !== 'RenderingCancelledException') {
            console.error(`Error rendering page ${index + 1}:`, error);
            alert(`Error rendering page ${index + 1}: ${error.message}`);
        }
    }
}, [pdfDoc, pageNumber, scale, rotation]);


const loadPdfDocument = async (pdfFileOrUrl) => {
    try {
        let pdf;
        if (typeof pdfFileOrUrl === "string") {
            // Load from URL
            pdf = await pdfjsLib.getDocument(pdfFileOrUrl).promise;
        } else {
            // Load from Blob (file upload)
            const arrayBuffer = await pdfFileOrUrl.arrayBuffer();
            pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
        }

        setPdfDoc(pdf); // Set the loaded PDF document
        setTotalPages(pdf.numPages); // Get the total number of pages in the document
        setPageOrder([...Array(pdf.numPages).keys()].map((i) => i + 1)); // Initialize the page order
        setCurrentPage(1); // Set the current page to the first page

        console.log(`Loaded PDF with ${pdf.numPages} pages.`);
    } catch (error) {
        console.error("Error loading PDF:", error);
        alert(`Error loading PDF: ${error.message}`);
    }
};
