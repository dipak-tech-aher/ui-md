import React, { useState, useEffect, useCallback, useRef } from 'react';
import * as pdfjsLib from 'pdfjs-dist/build/pdf';
import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import update from 'immutability-helper';
import { PDFDocument, degrees } from 'pdf-lib';
import { IconMaterial } from '@abyss/web/ui/IconMaterial';
import { Tooltip } from '@abyss/web/ui/Tooltip';
import { setPageOrder, setRotationPerPage } from '@src/Store';
pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;
import { useDispatch, useSelector } from 'react-redux';

const ItemTypes = {
  PAGE: 'page',
};

const DraggablePage = ({
  isDraggable,
  pageNumber,
  index,
  movePage,
  pdfDoc,
  rotatePage,
  scale,
  isActive,
  pageRef,
  rotation,
}) => {
  const canvasRef = useRef(null);
  const renderTaskRef = useRef(null);
  const [{ isDragging }, drag] = useDrag({
    type: ItemTypes.PAGE,
    item: { index },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  const [, drop] = useDrop({
    accept: ItemTypes.PAGE,
    hover: (draggedItem) => {
      if (draggedItem.index !== index && isDraggable) {
        movePage(draggedItem.index, index);
        draggedItem.index = index;
      }
    },
  });
  
  // const renderPage = useCallback(async () => {  
  //   if (!pdfDoc || !pageNumber || !canvasRef.current) return;  
    
  //   const canvas = canvasRef.current;  
  //   const context = canvas.getContext('2d');  
    
  //   try {  
  //     const page = await pdfDoc.getPage(pageNumber);  
  //     const pageRotation = page.rotate; // Get the default rotation from the PDF metadata  
  //     // const combinedRotation = (rotation + pageRotation) % 360; // Combine default rotation with custom rotation  
  //     const viewport = page.getViewport({ scale, rotation: pageRotation });  
    
  //     const pixelRatio = window.devicePixelRatio || 1;  
  //     canvas.width = viewport.width * pixelRatio;  
  //     canvas.height = viewport.height * pixelRatio;  
    
  //     context.scale(window.devicePixelRatio, window.devicePixelRatio);  
    
  //     if (renderTaskRef.current) {  
  //       renderTaskRef.current.cancel();  
  //     }  
    
  //     // Check if the rotation value has changed  
  //     if (rotation !== pageRotation) {  
  //       renderTaskRef.current = page.render({  
  //         canvasContext: context,  
  //         viewport,  
  //       });  
    
  //       await renderTaskRef.current.promise;  
  //     }  
  //   } catch (error) {  
  //     if (error.name !== 'RenderingCancelledException') {  
  //       console.error(`Error rendering page ${pageNumber}:`, error);  
  //       alert(`Error rendering page ${pageNumber}: ${error.message}`);  
  //     }  
  //   }  
  // }, [pdfDoc, pageNumber, scale, rotation]);  
    
  
  const renderPage = useCallback(async () => {
    if (!pdfDoc || !pageNumber || !canvasRef.current) return;

    const canvas = canvasRef.current;
    const context = canvas.getContext('2d');

    try {
      const page = await pdfDoc.getPage(pageNumber);
      const pageRotation = page.rotate; // Get the default rotation from the PDF metadata
      console.log('rotation-------->', rotation);
      console.log('pageRotation-------->', pageRotation);
      const combinedRotation = (rotation + pageRotation) % 360; // Combine default rotation with custom rotation
      const viewport = page.getViewport({ scale, rotation: combinedRotation });

      const pixelRatio = window.devicePixelRatio || 1;
      canvas.width = viewport.width * pixelRatio;
      canvas.height = viewport.height * pixelRatio;

      // canvas.width = viewport.width * window.devicePixelRatio;
      // canvas.height = viewport.height * window.devicePixelRatio;
      // canvas.style.width = `${viewport.width}px`;
      // canvas.style.height = `${viewport.height}px`;

      context.scale(window.devicePixelRatio, window.devicePixelRatio);

      if (renderTaskRef.current) {
        renderTaskRef.current.cancel();
      }

      renderTaskRef.current = page.render({
        canvasContext: context,
        viewport,
      });

      await renderTaskRef.current.promise;
    } catch (error) {
      if (error.name !== 'RenderingCancelledException') {
        console.error(`Error rendering page ${index + 1}:`, error);
        alert(`Error rendering page ${index + 1}: ${error.message}`);
      }
    }
  }, [pdfDoc, pageNumber, scale, rotation]);

  useEffect(() => {
    renderPage();
    return () => {
      if (renderTaskRef.current) {
        renderTaskRef.current.cancel();
      }
    };
  }, [renderPage]);

  const handleRotateClockwise = () => {
    const newRotation = (rotation + 90) % 360;
    rotatePage(index, newRotation); // Update global rotation state
  };

  const handleRotateAnticlockwise = () => {
    const newRotation = (rotation - 90 + 360) % 360;
    rotatePage(index, newRotation); // Update global rotation state
  };

  return (
    <>
      <div
        ref={(node) => {
          drag(drop(node));
          pageRef(node);
        }}
        className={`page-container ${isActive ? 'active' : ''}  ${
          isDraggable ? 'cursor-move' : ''
        }`}
        style={{ opacity: isDragging ? 0.5 : 1 }}
      >
        <canvas ref={canvasRef} />
      </div>
      <div className="flex fd-rev gap-5 p-r bottom-17 jc-center">
        <Tooltip content="Rotate Clockwise">
          <span aria-label="Tooltip information">
            <IconMaterial
              className="cursor-pointer fill-color-black"
              icon="rotate_right"
              onClick={handleRotateClockwise}
            />
          </span>
        </Tooltip>
        <span className="page-number">{pageNumber}</span>
        <Tooltip content="Rotate Anti Clockwise">
          <span aria-label="Tooltip information">
            <IconMaterial
              className="cursor-pointer fill-color-black"
              icon="rotate_left"
              onClick={handleRotateAnticlockwise}
            />
          </span>
        </Tooltip>
      </div>
    </>
  );
};

const PDFViewerNew = ({ pdfFile }) => {
  const claimPreviewData = useSelector((state) => state?.claimsPreview);
  const pageOrder = claimPreviewData?.pageOrder?.pageOrder;
  const rotationPerPage =
    claimPreviewData?.rotationPerPage?.rotationPerPage ?? {};
  // const [rotationPerPage, setRotationPerPage] = useState({});
  const [error, setError] = useState(null);
  const [pdfUrl, setPdfUrl] = useState(pdfFile); // Store the uploaded PDF Blob URL
  const [pdfDoc, setPdfDoc] = useState(null);
  // const [pageOrder, setPageOrder] = useState([]);
  const [totalPages, setTotalPages] = useState(0);
  const [scale, setScale] = useState(1);
  const [currentPage, setCurrentPage] = useState(1);
  const [drawerOpen, setDrawerOpen] = useState(false);
  const pageRefs = useRef([]); // Ref to store references for each page
  const fileInputRef = useRef(null);
  const dispatch = useDispatch();

  

  const loadPdfDocument = async (pdfFileOrUrl) => {
    try {
      let pdf;
      if (typeof pdfFileOrUrl === 'string') {
        console.log('here--->', pdfFileOrUrl);
        pdf = await pdfjsLib.getDocument(pdfFileOrUrl).promise; // Load from URL
      } else {
        console.log();
        const arrayBuffer = await pdfFileOrUrl.arrayBuffer();
        pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise; // Load from Blob (file upload)
      }
      setPdfDoc(pdf);
      setTotalPages(pdf.numPages);
      dispatch(
        setPageOrder({
          pageOrder: [...Array(pdf.numPages).keys()].map((i) => i + 1),
        })
      );
      setCurrentPage(1); // Reset to the first page after loading a new PDF
      console.log(`Loaded PDF with ${pdf.numPages} pages.`);
    } catch (error) {
      console.error('Error loading PDF:', error);
      // setError(`Error loading PDF: ${error.message}`);
      // alert(`Error loading PDF: ${error.message}`);
    }
  };

  useEffect(() => {
    if (pdfUrl) {
      console.log('loading pdf------>', pdfUrl);
      loadPdfDocument(pdfUrl);
    }
  }, [pdfUrl]);

  const movePage = (fromIndex, toIndex) => {
    const updatedOrder = update(pageOrder, {
      $splice: [
        [fromIndex, 1],
        [toIndex, 0, pageOrder[fromIndex]],
      ],
    });
    dispatch(
      setPageOrder({
        pageOrder: updatedOrder,
      })
    );
  };

  const rotatePage = (index, newRotation) => {
    dispatch(
      setRotationPerPage({
        rotationPerPage: {
          ...rotationPerPage,
          [index]: newRotation,
        },
      })
    );
  };

  const handleZoomIn = () => {
    setScale((prevScale) => Math.min(prevScale + 0.1, 4)); // Zoom in by 10%
  };

  const handleZoomOut = () => {
    setScale((prevScale) => Math.max(prevScale - 0.1, 0.5)); // Zoom out by 10%
  };

  const toggleDrawer = () => setDrawerOpen((prev) => !prev);

  const handleDownload = async () => {
    if (!pdfDoc) return;

    try {
      const pdfBytes = await fetch(pdfUrl).then((res) => res.arrayBuffer());
      const originalPdfDoc = await PDFDocument.load(pdfBytes);
      const newPdfDoc = await PDFDocument.create();

      for (const pageNumber of pageOrder) {
        const [copiedPage] = await newPdfDoc.copyPages(originalPdfDoc, [
          pageNumber - 1,
        ]);
        const pageRotation =
          (rotationPerPage?.rotationPerPage?.[pageNumber - 1] || 0) +
          copiedPage.getRotation().angle;
        copiedPage.setRotation(degrees(pageRotation));
        newPdfDoc.addPage(copiedPage);
      }

      const newPdfBytes = await newPdfDoc.save();
      const blob = new Blob([newPdfBytes], { type: 'application/pdf' });
      console.log('blob---------->', blob);
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      console.log('link---------->', link);

      link.href = url;
      link.download = 'updated1.pdf';
      document.body.appendChild(link);
      console.log('link-------->', link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error downloading PDF:', error);
      alert(`Error downloading PDF: ${error.message}`);
    }
  };



  const handlePrint = async () => {
    if (!pdfDoc) return;

    try {
      const pdfBytes = await fetch(pdfUrl).then((res) => res.arrayBuffer());

      // Load the PDF using pdf-lib
      const originalPdfDoc = await PDFDocument.load(pdfBytes);

      // Create a new PDF document to hold the rearranged pages
      const newPdfDoc = await PDFDocument.create();

      // Loop through the reordered pages
      for (const pageNumber of pageOrder) {
        const [copiedPage] = await newPdfDoc.copyPages(originalPdfDoc, [
          pageNumber - 1,
        ]);

        // Retrieve rotation for each page
        const pageRotation = rotationPerPage[pageNumber - 1] || 0;

        // Apply rotation using pdf-lib's `degrees` function
        copiedPage.setRotation(degrees(pageRotation));

        // Add the copied and possibly rotated page to the new PDF
        newPdfDoc.addPage(copiedPage);
      }

      // Save the newly created PDF
      const newPdfBytes = await newPdfDoc.save();

      // Create a Blob from the PDF bytes
      const blob = new Blob([newPdfBytes], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);

      // Open the PDF in a new tab
      const newWindow = window.open(url);

      if (!newWindow) {
        alert('Please allow popups to open the PDF for printing.');
      } else {
        // Ensure the print dialog opens after the PDF has loaded in the new tab
        newWindow.onload = () => {
          newWindow.focus();
          newWindow.print();

          // Cleanup: Optionally close the tab after printing
          newWindow.onafterprint = () => {
            newWindow.close();
          };
        };
      }
    } catch (error) {
      console.error('Error printing PDF:', error);
    }
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file && file.type === 'application/pdf') {
      const fileUrl = URL.createObjectURL(file); // Create a URL for the uploaded PDF
      setPdfUrl(fileUrl); // Set the URL as the PDF source
    } else {
      alert('Please upload a valid PDF file.');
    }
  };

  // useEffect(() => {
  //   if (pdfDoc && pageRefs.current[currentPage - 1]) {
  //     pageRefs.current[currentPage - 1]?.scrollIntoView({
  //       behavior: 'smooth',
  //       block: 'start',
  //     });
  //     console.log(`Scrolled to page ${currentPage}`);
  //   }
  // }, [currentPage, pdfDoc]);

  const handlePageChange = (e) => {
    const newPage = Number(e.target.value);
    if (newPage >= 1 && newPage <= totalPages) {
      const pageIndex = pageOrder.indexOf(newPage);
      if (pageIndex !== -1) {
        setCurrentPage(newPage);
        pageRefs.current[pageIndex]?.scrollIntoView({
          behavior: 'smooth',
          block: 'start',
        });
      }
    }
  };

  const goToNextPage = () => {
    const currentPageIndex = pageOrder.indexOf(currentPage);
    if (currentPageIndex < totalPages - 1) {
      const nextPageNumber = pageOrder[currentPageIndex + 1];
      setCurrentPage(nextPageNumber);
      pageRefs.current[currentPageIndex + 1]?.scrollIntoView({
        behavior: 'smooth',
        block: 'start',
      });
    }
  };

  const goToPreviousPage = () => {
    const currentPageIndex = pageOrder.indexOf(currentPage);
    if (currentPageIndex > 0) {
      const previousPageNumber = pageOrder[currentPageIndex - 1];
      setCurrentPage(previousPageNumber);
      pageRefs.current[currentPageIndex - 1]?.scrollIntoView({
        behavior: 'smooth',
        block: 'start',
      });
    }
  };

  const scrollToTop = () => {
    if (pageRefs.current[0]) {
      pageRefs.current[0].scrollIntoView({
        behavior: 'smooth',
        block: 'start',
      });
      setCurrentPage(1);
    }
  };

  const scrollToBottom = () => {
    const lastPageIndex = totalPages - 1;
    if (pageRefs.current[lastPageIndex]) {
      pageRefs.current[lastPageIndex].scrollIntoView({
        behavior: 'smooth',
        block: 'end',
      });
      setCurrentPage(totalPages);
    } else {
      console.error('Last page not found in pageRefs');
    }
  };

  useEffect(() => {
    if (pdfDoc) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const visiblePageIndex = pageRefs.current.indexOf(entry.target);
              if (visiblePageIndex !== -1) {
                const visiblePageNumber = pageOrder[visiblePageIndex];
                setCurrentPage(visiblePageNumber); // Update currentPage when the page is visible
              }
            }
          });
        },
        {
          root: null, // Use the viewport as the root
          rootMargin: '0px',
          threshold: 0.5, // Trigger when 50% of the page is visible
        }
      );

      // Observe each page
      pageRefs.current.forEach((pageRef) => {
        if (pageRef) observer.observe(pageRef);
      });

      // Clean up the observer on component unmount
      return () => {
        if (observer) {
          pageRefs.current.forEach((pageRef) => {
            if (pageRef) observer.unobserve(pageRef);
          });
        }
      };
    }
  }, [pdfDoc]);

  useEffect(() => {
    if (pdfDoc) {
      (async () => {
        const page = await pdfDoc.getPage(1); // Test with the first page or any specific page
        console.log('Initial rotation of the page:', page.rotate);
      })();
    }
  }, [pdfDoc]);

  if (!pdfDoc) {
    if (error) {
      return (
        <div>
          <b>{error}</b>
        </div>
      );
    } else {
      return <div>Loading PDF...</div>;
    }
  }

  const handleFileUploadClicked = () => {
    if (fileInputRef?.current) {
      fileInputRef?.current?.click();
    }
  };

  return (
    <div className="pdf-Viewer-body">
      <DndProvider backend={HTML5Backend}>
        <div className="navbar">
          {!drawerOpen && (
            <Tooltip content="Open">
              <span aria-label="Tooltip information">
                <IconMaterial
                  className="cursor-pointer"
                  variant="outlined"
                  icon="density_medium"
                  onClick={toggleDrawer}
                />
              </span>
            </Tooltip>
          )}
          {drawerOpen && (
            <Tooltip content="Close">
              <span aria-label="Tooltip information">
                <IconMaterial
                  className="cursor-pointer"
                  variant="outlined"
                  icon="clear"
                  onClick={toggleDrawer}
                />
              </span>
            </Tooltip>
          )}
          <input
            className="page-navigation-number"
            type="number"
            value={currentPage}
            onChange={handlePageChange}
            min="1"
            max={totalPages}
          />

          <div className="flex gap-5">
            <Tooltip content="Zoom Out">
              <span aria-label="Tooltip information">
                <IconMaterial
                  className="cursor-pointer"
                  variant="outlined"
                  icon="zoom_out"
                  onClick={handleZoomOut}
                />
              </span>
            </Tooltip>
            <span className="zoom-percentage">{`${Math.round(
              scale * 100
            )}%`}</span>

            <Tooltip content="Zoom In">
              <span aria-label="Tooltip information">
                <IconMaterial
                  className="cursor-pointer"
                  variant="outlined"
                  icon="zoom_in"
                  onClick={handleZoomIn}
                />
              </span>
            </Tooltip>
          </div>

          <Tooltip content="Upload any file to view">
            <span aria-label="Tooltip information">
              <IconMaterial
                className="cursor-pointer"
                variant="outlined"
                icon="upload_file"
                onClick={handleFileUploadClicked}
              />
              <input
                ref={fileInputRef}
                style={{ display: 'none' }}
                type="file"
                accept="application/pdf"
                onChange={handleFileUpload}
              />
            </span>
          </Tooltip>

          <Tooltip content="Download file">
            <span aria-label="Tooltip information">
              <IconMaterial
                className="cursor-pointer"
                variant="outlined"
                icon="download"
                onClick={() => handleDownload()}
              />
            </span>
          </Tooltip>

          <Tooltip content="Print pdf">
            <span aria-label="Tooltip information">
              <IconMaterial
                className="cursor-pointer"
                variant="outlined"
                icon="local_printshop"
                onClick={handlePrint}
              />
            </span>
          </Tooltip>
          <div className="flex gap-5">
            <Tooltip content="Navigate to previous page">
              <span aria-label="Tooltip information">
                <IconMaterial
                  icon="keyboard_arrow_left"
                  className="cursor-pointer"
                  variant="outlined"
                  onClick={goToPreviousPage}
                  disabled={currentPage === 1}
                />
              </span>
            </Tooltip>
            {currentPage}/{totalPages}
            <Tooltip content="Navigate to next page">
              <span aria-label="Tooltip information">
                <IconMaterial
                  icon="keyboard_arrow_right"
                  variant="outlined"
                  className="cursor-pointer"
                  onClick={goToNextPage}
                  disabled={currentPage === totalPages}
                />
              </span>
            </Tooltip>
          </div>

          <Tooltip content="Scroll to top">
            <span aria-label="Tooltip information">
              <IconMaterial
                className="cursor-pointer"
                variant="outlined"
                icon="keyboard_double_arrow_up"
                onClick={scrollToTop}
              />
            </span>
          </Tooltip>
          <Tooltip content="Scroll to bottom">
            <span aria-label="Tooltip information">
              <IconMaterial
                variant="outlined"
                className="cursor-pointer"
                icon="keyboard_double_arrow_down"
                onClick={scrollToBottom}
              />
            </span>
          </Tooltip>
        </div>
        <div className="pdf-viewer-layout">
          <div className={`drawer ${drawerOpen ? 'open' : 'closed'}`}>
            {pageOrder.map((pageNumber, index) => (
              <div
                key={pageNumber}
                ref={(el) => (pageRefs.current[index] = el)}
                className="thumbnail-container"
              >
                <DraggablePage
                  pageNumber={pageNumber}
                  isDraggable={true}
                  index={index}
                  movePage={movePage}
                  pdfDoc={pdfDoc}
                  rotatePage={rotatePage}
                  scale={scale}
                  isActive={currentPage === pageNumber}
                  rotation={rotationPerPage?.[index] || 0} // Pass the rotation from state
                  pageRef={(el) => (pageRefs.current[index] = el)} // Assign ref to page
                />
              </div>
            ))}
          </div>
          <div className="main-viewer">
            {pageOrder.map((pageNumber, index) => (
              <DraggablePage
                isDraggable={false}
                key={pageNumber}
                pageNumber={pageNumber}
                index={index}
                movePage={movePage}
                pdfDoc={pdfDoc}
                rotatePage={rotatePage}
                scale={scale}
                isActive={currentPage === pageNumber}
                rotation={rotationPerPage[index] || 0} // Pass the rotation from state
                pageRef={(el) => (pageRefs.current[index] = el)} // Assign ref to page
              />
            ))}
          </div>
        </div>
      </DndProvider>
    </div>
  );
};

export default PDFViewerNew;
